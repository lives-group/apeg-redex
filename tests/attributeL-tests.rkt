#lang racket
(require redex
         "../attributeL-smallStep.rkt"
         "../attributeL-bigStep.rkt")


(define (result-adaptation reduction-result)
  (if (< (length reduction-result) 2)
      (list (car (car reduction-result)))
      (append (car (car reduction-result)) (result-adaptation (cdr reduction-result)))))


(test-equal (result-adaptation (apply-reduction-relation* expr-red (term (#t ()))))
            (judgment-holds (eval () #t value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term (123 ()))))
            (judgment-holds (eval () 123 value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ("string" ()))))
            (judgment-holds (eval () "string" value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((⇒ (("map1" 1) ("map2" 2) ("map3" 3))) ()))))
            (judgment-holds (eval () (⇒ (("map1" 1) ("map2" 2) ("map3" 3))) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((: 1 2) ()))))
            (judgment-holds (eval () (: 1 2) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term (nil ()))))
            (judgment-holds (eval () nil value) value))


(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((+ 3 4) ()))))
            (judgment-holds (eval () (+ 3 4) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((+ 3.14159 4) ()))))
            (judgment-holds (eval () (+ 3.14159 4) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((- 7 3) ()))))
            (judgment-holds (eval () (- 7 3) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((- 7 3.14159) ()))))
            (judgment-holds (eval () (- 7 3.14159) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((* 7 3) ()))))
            (judgment-holds (eval () (* 7 3) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((* 7 3.14159) ()))))
            (judgment-holds (eval () (* 7 3.14159) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((÷ 14 6) ()))))
            (judgment-holds (eval () (÷ 14 6) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((÷ 7 3.14159) ()))))
            (judgment-holds (eval () (÷ 7 3.14159) value) value))


(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((&& #t #t) ()))))
            (judgment-holds (eval () (&& #t #t) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((&& #t #f) ()))))
            (judgment-holds (eval () (&& #t #f) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((&& #f #f) ()))))
            (judgment-holds (eval () (&& #f #f) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((&& #f #t) ()))))
            (judgment-holds (eval () (&& #f #t) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((|| #t #t) ()))))
            (judgment-holds (eval () (|| #t #t) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((|| #t #f) ()))))
            (judgment-holds (eval () (|| #t #f) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((|| #f #f) ()))))
            (judgment-holds (eval () (|| #f #f) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((|| #f #t) ()))))
            (judgment-holds (eval () (|| #f #t) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((! #f) ()))))
            (judgment-holds (eval () (! #f) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((! #t) ()))))
            (judgment-holds (eval () (! #t) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((== 0 1) ()))))
            (judgment-holds (eval () (== 0 1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((== 32 32) ()))))
            (judgment-holds (eval () (== 32 32) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((== 64 64.0) ()))))
            (judgment-holds (eval () (== 64 64.0) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((> 3 4.5) ()))))
            (judgment-holds (eval () (> 3 4.5) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((> 3 3) ()))))
            (judgment-holds (eval () (> 3 3) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((> 4.5 3) ()))))
            (judgment-holds (eval () (> 4.5 3) value) value))


(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((: 3 nil) ()))))
            (judgment-holds (eval () (: 3 nil) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((head (: 3 nil)) ()))))
            (judgment-holds (eval () (head (: 3 nil)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((head (: nil 3)) ()))))
            (judgment-holds (eval () (head (: nil 3)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((head nil) ()))))
            (judgment-holds (eval () (head nil) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((tail (: 3 nil)) ()))))
            (judgment-holds (eval () (tail (: 3 nil)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((tail (: nil 3)) ()))))
            (judgment-holds (eval () (tail (: nil 3)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((tail nil) ()))))
            (judgment-holds (eval () (tail nil) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((: 30 120) ()))))
            (judgment-holds (eval () (: 30 120) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((head (: 30 120)) ()))))
            (judgment-holds (eval () (head (: 30 120)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((head (: x 120)) ((x 30))))))
            (judgment-holds (eval ((x 30)) (head (: x 120)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((tail (: 30 120)) ()))))
            (judgment-holds (eval () (tail (: 30 120)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((tail (: 30 x)) ((x 120))))))
            (judgment-holds (eval ((x 120)) (tail (: 30 x)) value) value))


(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((⇒ ()) ()))))
            (judgment-holds (eval () (⇒ ()) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((⇒ (("k1" 1) ("k1" 2))) ()))))
            (judgment-holds (eval () (⇒ (("k1" 1) ("k1" 2))) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((⇒ (("key" 1))) ()))))
            (judgment-holds (eval () (⇒ (("key" 1))) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((⇒ (("key" (* 3 4)))) ()))))
            (judgment-holds (eval () (⇒ (("key" (* 3 4)))) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((put (⇒ ()) "key" (* 3 4)) ()))))
            (judgment-holds (eval () (put (⇒ ()) "key" (* 3 4)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((put (⇒ (("key" 15))) "key" (* 3 4)) ()))))
            (judgment-holds (eval () (put (⇒ (("key" 15))) "key" (* 3 4)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((put (⇒ (("k1" 1) ("k2" 2))) "k1" 2) ()))))
            (judgment-holds (eval () (put (⇒ (("k1" 1) ("k2" 2))) "k1" 2) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((put (⇒ (("k1" 1) ("k2" 2))) "k2" 1) ()))))
            (judgment-holds (eval () (put (⇒ (("k1" 1) ("k2" 2))) "k2" 1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((put (⇒ ()) x (* 3 4)) ((x "key"))))))
            (judgment-holds (eval ((x "key")) (put (⇒ ()) x (* 3 4)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((put (⇒ ()) "key" x) ((x 12))))))
            (judgment-holds (eval ((x 12)) (put (⇒ ()) "key" x) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((get (⇒ (("key" (* 3 4)))) "key") ()))))
            (judgment-holds (eval () (get (⇒ (("key" (* 3 4)))) "key") value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((get (⇒ (("key" (* 3 4)))) x) ((x "key"))))))
            (judgment-holds (eval ((x "key")) (get (⇒ (("key" (* 3 4)))) x) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((get (⇒ ((x (* 3 4)))) "key") ((x "key"))))))
            (judgment-holds (eval ((x "key")) (get (⇒ ((x (* 3 4)))) "key") value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((get (⇒ (("key" x))) "key") ((x 12))))))
            (judgment-holds (eval ((x 12)) (get (⇒ (("key" x))) "key") value) value))


(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((+ x0 x1) ((x0 2) (x1 1))))))
            (judgment-holds (eval ((x0 2) (x1 1)) (+ x0 x1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((+ x0 x1) ((x0 2.718281828) (x1 1))))))
            (judgment-holds (eval ((x0 2.718281828) (x1 1)) (+ x0 x1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((- x0 x1) ((x0 15) (x1 7))))))
            (judgment-holds (eval ((x0 15) (x1 7)) (- x0 x1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((- x0 x1) ((x0 15) (x1 2.718281828))))))
            (judgment-holds (eval ((x0 15) (x1 2.718281828)) (- x0 x1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((* x0 x1) ((x0 15) (x1 7))))))
            (judgment-holds (eval ((x0 15) (x1 7)) (* x0 x1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((* x0 x1) ((x0 15) (x1 2.718281828))))))
            (judgment-holds (eval ((x0 15) (x1 2.718281828)) (* x0 x1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((÷ x0 x1) ((x0 30) (x1 14))))))
            (judgment-holds (eval ((x0 30) (x1 14)) (÷ x0 x1) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((÷ x0 x1) ((x0 15) (x1 2.718281828))))))
            (judgment-holds (eval ((x0 15) (x1 2.718281828)) (÷ x0 x1) value) value))


(test-equal (result-adaptation (apply-reduction-relation* expr-red (term (y ((y (: 127 128)))))))
            (judgment-holds (eval ((y (: 127 128))) y value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((head (: 127 128)) ()))))
            (judgment-holds (eval () (head (: 127 128)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((head y) ((y (: 127 128)))))))
            (judgment-holds (eval ((y (: 127 128))) (head y) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((tail (: 127 128)) ()))))
            (judgment-holds (eval () (tail (: 127 128)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((tail y) ((y (: 127 128)))))))
            (judgment-holds (eval ((y (: 127 128))) (tail y) value) value))


(test-equal (result-adaptation (apply-reduction-relation* expr-red (term (x ((x (⇒ (("key" 1)))))))))
            (judgment-holds (eval ((x (⇒ (("key" 1))))) x value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((put x "key" (* 3 4)) ((x (⇒ ())))))))
            (judgment-holds (eval ((x (⇒ ()))) (put x "key" (* 3 4)) value) value))
(test-equal (result-adaptation (apply-reduction-relation* expr-red (term ((get x "key") ((x (⇒ (("key" 12)))))))))
            (judgment-holds (eval ((x (⇒ (("key" 12))))) (get x "key") value) value))


(test-results)