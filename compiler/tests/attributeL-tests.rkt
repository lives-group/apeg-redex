#lang racket


(require "../../attributeL-bigStep.rkt"
         "../parser.rkt"
         "../compiler.rkt"
         redex)


(define (result-adaptation reduction-result)
  (if (< (length reduction-result) 2)
      (list (car (car reduction-result)))
      (append (car (car reduction-result)) (result-adaptation (cdr reduction-result)))))


(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "true"))) value) value)
            '(#t))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "123"))) value) value)
            '(123))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "\"string\""))) value) value)
            '("string"))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "<<\"map1\" -> 1, \"map2\" -> 2, \"map3\" -> 3>>"))) value) value)
            '((⇒ (("map1" 1) ("map2" 2) ("map3" 3)))))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "[1:2]"))) value) value)
            '((: 1 2)))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "[]"))) value) value)
            '(nil))


(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "1 + 2 + 3 + 4 + 5 +7"))) value) value)
            '(22))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "3.14159 + 4"))) value) value)
            '(7.14159))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "7 - 3"))) value) value)
            '(4))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "7 - 3.14159"))) value) value)
            '(3.85841))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "7 * 3 + 4"))) value) value)
            '(25))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "7 * 3.14159 + 4"))) value) value)
            '(25.99113))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "14 / 6"))) value) value)
            '(2))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "7.0 / 3.14159"))) value) value)
            '(2.2281710853421357))



(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "true && true"))) value) value)
            '(#t))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "true && false"))) value) value)
            '(#f))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "false && false"))) value) value)
            '(#f))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "false && true"))) value) value)
            '(#f))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "true || true"))) value) value)
            '(#t))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "true || false"))) value) value)
            '(#t))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "false || false"))) value) value)
            '(#f))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "false || true"))) value) value)
            '(#t))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "~false"))) value) value)
            '(#t))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "~true"))) value) value)
            '(#f))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "0 == 1"))) value) value)
            '(#f))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "32 == 32"))) value) value)
            '(#t))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "64 == 64.0"))) value) value)
            '(#t))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "3 > 4.5"))) value) value)
            '(#f))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "3 > 3"))) value) value)
            '(#f))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "4.5 > 3"))) value) value)
            '(#t))


(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "[3]"))) value) value)
            '((: 3 nil)))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "[3:[]]"))) value) value)
            '((: 3 nil)))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "head [3]"))) value) value)
            '(3))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "head [[]:3]"))) value) value)
            '(nil))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "head []"))) value) value)
            '())
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "tail [3:[]]"))) value) value)
            '(nil))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "tail [[]:3]"))) value) value)
            '(3))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "tail []"))) value) value)
            '())
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "[30:120]"))) value) value)
            '((: 30 120)))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "head [30:120]"))) value) value)
            '(30))
(test-equal (judgment-holds (eval ((x 30)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "head [x:120]"))) value) value)
            '(30))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "tail [30:120]"))) value) value)
            '(120))
(test-equal (judgment-holds (eval ((x 120)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "tail [30:x]"))) value) value)
            '(120))


(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "<<>>"))) value) value)
            '((⇒ ())))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "<<\"k1\" -> 1, \"k1\" -> 2>>"))) value) value)
            '((⇒ (("k1" 2)))))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "<<\"key\" -> 1>>"))) value) value)
            '((⇒ (("key" 1)))))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "<<\"key\" -> 3 * 4>>"))) value) value)
            '((⇒ (("key" 12)))))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "put <<>> \"key\" 3 * 4>>"))) value) value)
            '((⇒ (("key" 12)))))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "put <<\"key\" -> 15>> \"key\" 3 * 4>>"))) value) value)
            '((⇒ (("key" 12)))))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "put <<\"k1\" -> 1, \"k2\" -> 2>> \"k1\" 2"))) value) value)
            '((⇒ (("k1" 2) ("k2" 2)))))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "put <<\"k1\" -> 1, \"k2\" -> 2>> \"k2\" 1"))) value) value)
            '((⇒ (("k1" 1) ("k2" 1)))))
(test-equal (judgment-holds (eval ((x "key")) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "put <<>> x 3 * 4"))) value) value)
            '((⇒ (("key" 12)))))
(test-equal (judgment-holds (eval ((x 12)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "put <<>> \"key\" x"))) value) value)
            '((⇒ (("key" 12)))))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "get <<\"key\" -> 3 * 4>> \"key\""))) value) value)
            '(12))
(test-equal (judgment-holds (eval ((x "key")) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "get <<\"key\" -> 3 * 4>> x"))) value) value)
            '(12))
(test-equal (judgment-holds (eval ((x "key")) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "get <<x -> 3 * 4>> \"key\""))) value) value)
            '(12))
(test-equal (judgment-holds (eval ((x 12)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "get <<\"key\" -> x>> \"key\""))) value) value)
            '(12))


(test-equal (judgment-holds (eval ((x0 2) (x1 1)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x0 + x1"))) value) value)
            '(3))
(test-equal (judgment-holds (eval ((x0 2.718281828) (x1 1)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x0 + x1"))) value) value)
            '(3.718281828))
(test-equal (judgment-holds (eval ((x0 15) (x1 7)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x0 - x1"))) value) value)
            '(8))
(test-equal (judgment-holds (eval ((x0 15) (x1 2.718281828)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x0 - x1"))) value) value)
            '(12.281718172))
(test-equal (judgment-holds (eval ((x0 15) (x1 7)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x0 * x1"))) value) value)
            '(105))
(test-equal (judgment-holds (eval ((x0 15) (x1 2.718281828)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x0 * x1"))) value) value)
            '(40.774227419999995))
(test-equal (judgment-holds (eval ((x0 30) (x1 14)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x0 / x1"))) value) value)
            '(2))
(test-equal (judgment-holds (eval ((x0 15.0) (x1 2.718281828)) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x0 / x1"))) value) value)
            '(5.5181916185035101))


(test-equal (judgment-holds (eval ((y (: 127 128))) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "y"))) value) value)
            '((: 127 128)))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "head [127 : 128]"))) value) value)
            '(127))
(test-equal (judgment-holds (eval ((y (: 127 128))) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "head y"))) value) value)
            '(127))
(test-equal (judgment-holds (eval () ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "tail [127 : 128]"))) value) value)
            '(128))
(test-equal (judgment-holds (eval ((y (: 127 128))) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "tail y"))) value) value)
            '(128))


(test-equal (judgment-holds (eval ((x (⇒ (("key" 1))))) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "x"))) value) value)
            '((⇒ (("key" 1)))))
(test-equal (judgment-holds (eval ((x (⇒ ()))) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "put x \"key\" 3 * 4"))) value) value)
            '((⇒ (("key" 12)))))
(test-equal (judgment-holds (eval ((x (⇒ (("key" 12))))) ,(peg-compiler (PTVar "Expression" (run-parse-from "Expression" "get x \"key\""))) value) value)
            '(12))


(test-results)



